// @generated by cargo bevy-api-gen generate, modify the templates not this file
#![allow(clippy::all)]
#![allow(unused, deprecated, dead_code)]
#![cfg_attr(rustfmt, rustfmt_skip)]
use super::bevy_a11y::*;
use super::bevy_ecs::*;
use super::bevy_reflect::*;
use super::bevy_core::*;
use super::bevy_input::*;
use super::bevy_math::*;
use bevy_mod_scripting_core::{
    AddContextInitializer, StoreDocumentation, bindings::ReflectReference,
};
use crate::{
    bindings::proxy::{
        LuaReflectRefProxy, LuaReflectRefMutProxy, LuaReflectValProxy, LuaValProxy,
        LuaIdentityProxy,
    },
    RegisterLua, tealr::mlu::mlua::IntoLua,
};
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::prelude::CursorEntered",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::prelude::CursorEntered>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::prelude::CursorEntered>,
        other: LuaReflectRefProxy<bevy::window::prelude::CursorEntered>,
    ) -> bool;

"#,
    r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::prelude::CursorEntered>,
    ) -> LuaReflectValProxy<bevy::window::prelude::CursorEntered>;

"#,
    r#"

    #[lua(as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(
        _self: LuaReflectRefProxy<bevy::window::prelude::CursorEntered>,
    ) -> ();

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct CursorEntered {
    window: ReflectReference,
}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::prelude::CursorLeft",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::prelude::CursorLeft>,
    ) -> LuaReflectValProxy<bevy::window::prelude::CursorLeft>;

"#,
    r#"

    #[lua(as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(
        _self: LuaReflectRefProxy<bevy::window::prelude::CursorLeft>,
    ) -> ();

"#,
    r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::prelude::CursorLeft>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::prelude::CursorLeft>,
        other: LuaReflectRefProxy<bevy::window::prelude::CursorLeft>,
    ) -> bool;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct CursorLeft {
    window: ReflectReference,
}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::prelude::CursorMoved",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::prelude::CursorMoved>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::prelude::CursorMoved>,
        other: LuaReflectRefProxy<bevy::window::prelude::CursorMoved>,
    ) -> bool;

"#,
    r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::prelude::CursorMoved>,
    ) -> LuaReflectValProxy<bevy::window::prelude::CursorMoved>;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct CursorMoved {
    window: ReflectReference,
    position: ReflectReference,
    delta: ReflectReference,
}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::prelude::FileDragAndDrop",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::prelude::FileDragAndDrop>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::prelude::FileDragAndDrop>,
        other: LuaReflectRefProxy<bevy::window::prelude::FileDragAndDrop>,
    ) -> bool;

"#,
    r#"

    #[lua(as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(
        _self: LuaReflectRefProxy<bevy::window::prelude::FileDragAndDrop>,
    ) -> ();

"#,
    r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::prelude::FileDragAndDrop>,
    ) -> LuaReflectValProxy<bevy::window::prelude::FileDragAndDrop>;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct FileDragAndDrop {}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::prelude::Ime",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(
        _self: LuaReflectRefProxy<bevy::window::prelude::Ime>,
    ) -> ();

"#,
    r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::prelude::Ime>,
    ) -> LuaReflectValProxy<bevy::window::prelude::Ime>;

"#,
    r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::prelude::Ime>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::prelude::Ime>,
        other: LuaReflectRefProxy<bevy::window::prelude::Ime>,
    ) -> bool;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct Ime {}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::prelude::MonitorSelection",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::prelude::MonitorSelection>,
    ) -> LuaReflectValProxy<bevy::window::prelude::MonitorSelection>;

"#,
    r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::prelude::MonitorSelection>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::prelude::MonitorSelection>,
        other: LuaReflectRefProxy<bevy::window::prelude::MonitorSelection>,
    ) -> bool;

"#,
    r#"

    #[lua(as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(
        _self: LuaReflectRefProxy<bevy::window::prelude::MonitorSelection>,
    ) -> ();

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct MonitorSelection {}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::prelude::Window",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"
/// Setting to true will attempt to maximize the window.
/// Setting to false will attempt to un-maximize the window.

    #[lua()]
    fn set_maximized(
        _self: LuaReflectRefMutProxy<bevy::window::prelude::Window>,
        maximized: bool,
    ) -> ();

"#,
    r#"
/// Setting to true will attempt to minimize the window.
/// Setting to false will attempt to un-minimize the window.

    #[lua()]
    fn set_minimized(
        _self: LuaReflectRefMutProxy<bevy::window::prelude::Window>,
        minimized: bool,
    ) -> ();

"#,
    r#"
/// Calling this will attempt to start a drag-move of the window.
/// There is no guarantee that this will work unless the left mouse button was
/// pressed immediately before this function was called.

    #[lua()]
    fn start_drag_move(
        _self: LuaReflectRefMutProxy<bevy::window::prelude::Window>,
    ) -> ();

"#,
    r#"
/// The window's client area width in logical pixels.
/// See [`WindowResolution`] for an explanation about logical/physical sizes.

    #[lua()]
    fn width(_self: LuaReflectRefProxy<bevy::window::prelude::Window>) -> f32;

"#,
    r#"
/// The window's client area height in logical pixels.
/// See [`WindowResolution`] for an explanation about logical/physical sizes.

    #[lua()]
    fn height(_self: LuaReflectRefProxy<bevy::window::prelude::Window>) -> f32;

"#,
    r#"
/// The window's client area width in physical pixels.
/// See [`WindowResolution`] for an explanation about logical/physical sizes.

    #[lua()]
    fn physical_width(_self: LuaReflectRefProxy<bevy::window::prelude::Window>) -> u32;

"#,
    r#"
/// The window's client area height in physical pixels.
/// See [`WindowResolution`] for an explanation about logical/physical sizes.

    #[lua()]
    fn physical_height(_self: LuaReflectRefProxy<bevy::window::prelude::Window>) -> u32;

"#,
    r#"
/// The window's scale factor.
/// Ratio of physical size to logical size, see [`WindowResolution`].

    #[lua()]
    fn scale_factor(_self: LuaReflectRefProxy<bevy::window::prelude::Window>) -> f32;

"#,
    r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::prelude::Window>,
    ) -> LuaReflectValProxy<bevy::window::prelude::Window>;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct Window {
    cursor_options: bevy::window::CursorOptions,
    present_mode: bevy::window::PresentMode,
    mode: bevy::window::WindowMode,
    position: bevy::window::prelude::WindowPosition,
    resolution: bevy::window::WindowResolution,
    title: std::string::String,
    name: std::option::Option<std::string::String>,
    composite_alpha_mode: bevy::window::CompositeAlphaMode,
    resize_constraints: bevy::window::prelude::WindowResizeConstraints,
    resizable: bool,
    enabled_buttons: bevy::window::EnabledButtons,
    decorations: bool,
    transparent: bool,
    focused: bool,
    window_level: bevy::window::WindowLevel,
    canvas: std::option::Option<std::string::String>,
    fit_canvas_to_parent: bool,
    prevent_default_event_handling: bool,
    internal: bevy::window::InternalWindowState,
    ime_enabled: bool,
    ime_position: ReflectReference,
    window_theme: ReflectReference,
    visible: bool,
    skip_taskbar: bool,
    desired_maximum_frame_latency: ReflectReference,
    recognize_pinch_gesture: bool,
    recognize_rotation_gesture: bool,
    recognize_doubletap_gesture: bool,
    recognize_pan_gesture: ReflectReference,
    movable_by_window_background: bool,
    fullsize_content_view: bool,
    has_shadow: bool,
    titlebar_shown: bool,
    titlebar_transparent: bool,
    titlebar_show_title: bool,
    titlebar_show_buttons: bool,
}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::prelude::WindowMoved",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::prelude::WindowMoved>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::prelude::WindowMoved>,
        other: LuaReflectRefProxy<bevy::window::prelude::WindowMoved>,
    ) -> bool;

"#,
    r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::prelude::WindowMoved>,
    ) -> LuaReflectValProxy<bevy::window::prelude::WindowMoved>;

"#,
    r#"

    #[lua(as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(
        _self: LuaReflectRefProxy<bevy::window::prelude::WindowMoved>,
    ) -> ();

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct WindowMoved {
    window: ReflectReference,
    position: ReflectReference,
}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::prelude::WindowPosition",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::prelude::WindowPosition>,
    ) -> LuaReflectValProxy<bevy::window::prelude::WindowPosition>;

"#,
    r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::prelude::WindowPosition>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::prelude::WindowPosition>,
        other: LuaReflectRefProxy<bevy::window::prelude::WindowPosition>,
    ) -> bool;

"#,
    r#"
/// Set the window to a specific monitor.

    #[lua()]
    fn center(
        _self: LuaReflectRefMutProxy<bevy::window::prelude::WindowPosition>,
        monitor: LuaReflectValProxy<bevy::window::prelude::MonitorSelection>,
    ) -> ();

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct WindowPosition {}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::prelude::WindowResizeConstraints",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::prelude::WindowResizeConstraints>,
    ) -> LuaReflectValProxy<bevy::window::prelude::WindowResizeConstraints>;

"#,
    r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::prelude::WindowResizeConstraints>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::prelude::WindowResizeConstraints>,
        other: LuaReflectRefProxy<bevy::window::prelude::WindowResizeConstraints>,
    ) -> bool;

"#,
    r#"
/// Checks if the constraints are valid.
/// Will output warnings if it isn't.

    #[lua()]
    fn check_constraints(
        _self: LuaReflectRefProxy<bevy::window::prelude::WindowResizeConstraints>,
    ) -> LuaReflectValProxy<bevy::window::prelude::WindowResizeConstraints>;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct WindowResizeConstraints {
    min_width: f32,
    min_height: f32,
    max_width: f32,
    max_height: f32,
}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::WindowEvent",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::WindowEvent>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::WindowEvent>,
        other: LuaReflectRefProxy<bevy::window::WindowEvent>,
    ) -> bool;

"#,
    r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::WindowEvent>,
    ) -> LuaReflectValProxy<bevy::window::WindowEvent>;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct WindowEvent {}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::WindowResized",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::WindowResized>,
    ) -> LuaReflectValProxy<bevy::window::WindowResized>;

"#,
    r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::WindowResized>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::WindowResized>,
        other: LuaReflectRefProxy<bevy::window::WindowResized>,
    ) -> bool;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct WindowResized {
    window: ReflectReference,
    width: f32,
    height: f32,
}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::WindowCreated",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::WindowCreated>,
    ) -> LuaReflectValProxy<bevy::window::WindowCreated>;

"#,
    r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::WindowCreated>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::WindowCreated>,
        other: LuaReflectRefProxy<bevy::window::WindowCreated>,
    ) -> bool;

"#,
    r#"

    #[lua(as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(
        _self: LuaReflectRefProxy<bevy::window::WindowCreated>,
    ) -> ();

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct WindowCreated {
    window: ReflectReference,
}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::WindowClosing",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::WindowClosing>,
    ) -> LuaReflectValProxy<bevy::window::WindowClosing>;

"#,
    r#"

    #[lua(as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(
        _self: LuaReflectRefProxy<bevy::window::WindowClosing>,
    ) -> ();

"#,
    r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::WindowClosing>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::WindowClosing>,
        other: LuaReflectRefProxy<bevy::window::WindowClosing>,
    ) -> bool;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct WindowClosing {
    window: ReflectReference,
}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::WindowClosed",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::WindowClosed>,
    ) -> LuaReflectValProxy<bevy::window::WindowClosed>;

"#,
    r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::WindowClosed>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::WindowClosed>,
        other: LuaReflectRefProxy<bevy::window::WindowClosed>,
    ) -> bool;

"#,
    r#"

    #[lua(as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(
        _self: LuaReflectRefProxy<bevy::window::WindowClosed>,
    ) -> ();

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct WindowClosed {
    window: ReflectReference,
}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::WindowCloseRequested",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(
        _self: LuaReflectRefProxy<bevy::window::WindowCloseRequested>,
    ) -> ();

"#,
    r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::WindowCloseRequested>,
    ) -> LuaReflectValProxy<bevy::window::WindowCloseRequested>;

"#,
    r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::WindowCloseRequested>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::WindowCloseRequested>,
        other: LuaReflectRefProxy<bevy::window::WindowCloseRequested>,
    ) -> bool;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct WindowCloseRequested {
    window: ReflectReference,
}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::WindowDestroyed",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::WindowDestroyed>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::WindowDestroyed>,
        other: LuaReflectRefProxy<bevy::window::WindowDestroyed>,
    ) -> bool;

"#,
    r#"

    #[lua(as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(
        _self: LuaReflectRefProxy<bevy::window::WindowDestroyed>,
    ) -> ();

"#,
    r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::WindowDestroyed>,
    ) -> LuaReflectValProxy<bevy::window::WindowDestroyed>;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct WindowDestroyed {
    window: ReflectReference,
}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::RequestRedraw",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::RequestRedraw>,
    ) -> LuaReflectValProxy<bevy::window::RequestRedraw>;

"#,
    r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::RequestRedraw>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::RequestRedraw>,
        other: LuaReflectRefProxy<bevy::window::RequestRedraw>,
    ) -> bool;

"#,
    r#"

    #[lua(as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(
        _self: LuaReflectRefProxy<bevy::window::RequestRedraw>,
    ) -> ();

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct RequestRedraw {}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::WindowFocused",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(
        _self: LuaReflectRefProxy<bevy::window::WindowFocused>,
    ) -> ();

"#,
    r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::WindowFocused>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::WindowFocused>,
        other: LuaReflectRefProxy<bevy::window::WindowFocused>,
    ) -> bool;

"#,
    r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::WindowFocused>,
    ) -> LuaReflectValProxy<bevy::window::WindowFocused>;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct WindowFocused {
    window: ReflectReference,
    focused: bool,
}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::WindowOccluded",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::WindowOccluded>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::WindowOccluded>,
        other: LuaReflectRefProxy<bevy::window::WindowOccluded>,
    ) -> bool;

"#,
    r#"

    #[lua(as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(
        _self: LuaReflectRefProxy<bevy::window::WindowOccluded>,
    ) -> ();

"#,
    r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::WindowOccluded>,
    ) -> LuaReflectValProxy<bevy::window::WindowOccluded>;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct WindowOccluded {
    window: ReflectReference,
    occluded: bool,
}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::WindowScaleFactorChanged",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::WindowScaleFactorChanged>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::WindowScaleFactorChanged>,
        other: LuaReflectRefProxy<bevy::window::WindowScaleFactorChanged>,
    ) -> bool;

"#,
    r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::WindowScaleFactorChanged>,
    ) -> LuaReflectValProxy<bevy::window::WindowScaleFactorChanged>;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct WindowScaleFactorChanged {
    window: ReflectReference,
    scale_factor: f64,
}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::WindowBackendScaleFactorChanged",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::WindowBackendScaleFactorChanged>,
    ) -> LuaReflectValProxy<bevy::window::WindowBackendScaleFactorChanged>;

"#,
    r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::WindowBackendScaleFactorChanged>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::WindowBackendScaleFactorChanged>,
        other: LuaReflectRefProxy<bevy::window::WindowBackendScaleFactorChanged>,
    ) -> bool;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct WindowBackendScaleFactorChanged {
    window: ReflectReference,
    scale_factor: f64,
}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::WindowThemeChanged",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::WindowThemeChanged>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::WindowThemeChanged>,
        other: LuaReflectRefProxy<bevy::window::WindowThemeChanged>,
    ) -> bool;

"#,
    r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::WindowThemeChanged>,
    ) -> LuaReflectValProxy<bevy::window::WindowThemeChanged>;

"#,
    r#"

    #[lua(as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(
        _self: LuaReflectRefProxy<bevy::window::WindowThemeChanged>,
    ) -> ();

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct WindowThemeChanged {
    window: ReflectReference,
    theme: bevy::window::WindowTheme,
}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::AppLifecycle",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::AppLifecycle>,
    ) -> LuaReflectValProxy<bevy::window::AppLifecycle>;

"#,
    r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::AppLifecycle>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::AppLifecycle>,
        other: LuaReflectRefProxy<bevy::window::AppLifecycle>,
    ) -> bool;

"#,
    r#"
/// Return `true` if the app can be updated.

    #[lua()]
    fn is_active(_self: LuaReflectRefProxy<bevy::window::AppLifecycle>) -> bool;

"#,
    r#"

    #[lua(as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(
        _self: LuaReflectRefProxy<bevy::window::AppLifecycle>,
    ) -> ();

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct AppLifecycle {}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::PrimaryWindow",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(
        _self: LuaReflectRefProxy<bevy::window::PrimaryWindow>,
    ) -> ();

"#,
    r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::PrimaryWindow>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::PrimaryWindow>,
        other: LuaReflectRefProxy<bevy::window::PrimaryWindow>,
    ) -> bool;

"#,
    r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::PrimaryWindow>,
    ) -> LuaReflectValProxy<bevy::window::PrimaryWindow>;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct PrimaryWindow {}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::WindowTheme",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(
        _self: LuaReflectRefProxy<bevy::window::WindowTheme>,
    ) -> ();

"#,
    r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::WindowTheme>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::WindowTheme>,
        other: LuaReflectRefProxy<bevy::window::WindowTheme>,
    ) -> bool;

"#,
    r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::WindowTheme>,
    ) -> LuaReflectValProxy<bevy::window::WindowTheme>;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct WindowTheme {}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::Monitor",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::Monitor>,
    ) -> LuaReflectValProxy<bevy::window::Monitor>;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct Monitor {
    name: std::option::Option<std::string::String>,
    physical_height: u32,
    physical_width: u32,
    physical_position: ReflectReference,
    refresh_rate_millihertz: std::option::Option<u32>,
    scale_factor: f64,
    video_modes: ReflectReference,
}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::VideoMode",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::VideoMode>,
    ) -> LuaReflectValProxy<bevy::window::VideoMode>;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct VideoMode {
    physical_size: ReflectReference,
    bit_depth: u16,
    refresh_rate_millihertz: u32,
}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::PrimaryMonitor",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::PrimaryMonitor>,
    ) -> LuaReflectValProxy<bevy::window::PrimaryMonitor>;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct PrimaryMonitor {}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::SystemCursorIcon",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::SystemCursorIcon>,
    ) -> LuaReflectValProxy<bevy::window::SystemCursorIcon>;

"#,
    r#"

    #[lua(as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(
        _self: LuaReflectRefProxy<bevy::window::SystemCursorIcon>,
    ) -> ();

"#,
    r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::SystemCursorIcon>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::SystemCursorIcon>,
        other: LuaReflectRefProxy<bevy::window::SystemCursorIcon>,
    ) -> bool;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct SystemCursorIcon {}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::WindowRef",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::WindowRef>,
    ) -> LuaReflectValProxy<bevy::window::WindowRef>;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct WindowRef {}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::NormalizedWindowRef",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::NormalizedWindowRef>,
    ) -> LuaReflectValProxy<bevy::window::NormalizedWindowRef>;

"#,
    r#"

    #[lua(as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(
        _self: LuaReflectRefProxy<bevy::window::NormalizedWindowRef>,
    ) -> ();

"#,
    r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::NormalizedWindowRef>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::NormalizedWindowRef>,
        other: LuaReflectRefProxy<bevy::window::NormalizedWindowRef>,
    ) -> bool;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct NormalizedWindowRef();
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::CursorOptions",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::CursorOptions>,
    ) -> LuaReflectValProxy<bevy::window::CursorOptions>;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct CursorOptions {
    visible: bool,
    grab_mode: bevy::window::CursorGrabMode,
    hit_test: bool,
}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::PresentMode",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(
        _self: LuaReflectRefProxy<bevy::window::PresentMode>,
    ) -> ();

"#,
    r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::PresentMode>,
    ) -> LuaReflectValProxy<bevy::window::PresentMode>;

"#,
    r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::PresentMode>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::PresentMode>,
        other: LuaReflectRefProxy<bevy::window::PresentMode>,
    ) -> bool;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct PresentMode {}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::WindowMode",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::WindowMode>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::WindowMode>,
        other: LuaReflectRefProxy<bevy::window::WindowMode>,
    ) -> bool;

"#,
    r#"

    #[lua(as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(
        _self: LuaReflectRefProxy<bevy::window::WindowMode>,
    ) -> ();

"#,
    r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::WindowMode>,
    ) -> LuaReflectValProxy<bevy::window::WindowMode>;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct WindowMode {}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::WindowResolution",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::WindowResolution>,
    ) -> LuaReflectValProxy<bevy::window::WindowResolution>;

"#,
    r#"
/// Creates a new [`WindowResolution`].

    #[lua()]
    fn new(
        physical_width: f32,
        physical_height: f32,
    ) -> LuaReflectValProxy<bevy::window::WindowResolution>;

"#,
    r#"
/// Builder method for adding a scale factor override to the resolution.

    #[lua()]
    fn with_scale_factor_override(
        _self: LuaReflectValProxy<bevy::window::WindowResolution>,
        scale_factor_override: f32,
    ) -> LuaReflectValProxy<bevy::window::WindowResolution>;

"#,
    r#"
/// The window's client area width in logical pixels.

    #[lua()]
    fn width(_self: LuaReflectRefProxy<bevy::window::WindowResolution>) -> f32;

"#,
    r#"
/// The window's client area height in logical pixels.

    #[lua()]
    fn height(_self: LuaReflectRefProxy<bevy::window::WindowResolution>) -> f32;

"#,
    r#"
/// The window's client area width in physical pixels.

    #[lua()]
    fn physical_width(_self: LuaReflectRefProxy<bevy::window::WindowResolution>) -> u32;

"#,
    r#"
/// The window's client area height in physical pixels.

    #[lua()]
    fn physical_height(_self: LuaReflectRefProxy<bevy::window::WindowResolution>) -> u32;

"#,
    r#"
/// The ratio of physical pixels to logical pixels.
/// `physical_pixels = logical_pixels * scale_factor`

    #[lua()]
    fn scale_factor(_self: LuaReflectRefProxy<bevy::window::WindowResolution>) -> f32;

"#,
    r#"
/// The window scale factor as reported by the window backend.
/// This value is unaffected by [`WindowResolution::scale_factor_override`].

    #[lua()]
    fn base_scale_factor(
        _self: LuaReflectRefProxy<bevy::window::WindowResolution>,
    ) -> f32;

"#,
    r#"
/// The scale factor set with [`WindowResolution::set_scale_factor_override`].
/// This value may be different from the scale factor reported by the window backend.

    #[lua()]
    fn scale_factor_override(
        _self: LuaReflectRefProxy<bevy::window::WindowResolution>,
    ) -> std::option::Option<f32>;

"#,
    r#"
/// Set the window's logical resolution.

    #[lua()]
    fn set(
        _self: LuaReflectRefMutProxy<bevy::window::WindowResolution>,
        width: f32,
        height: f32,
    ) -> ();

"#,
    r#"
/// Set the window's physical resolution.
/// This will ignore the scale factor setting, so most of the time you should
/// prefer to use [`WindowResolution::set`].

    #[lua()]
    fn set_physical_resolution(
        _self: LuaReflectRefMutProxy<bevy::window::WindowResolution>,
        width: u32,
        height: u32,
    ) -> ();

"#,
    r#"
/// Set the window's scale factor, this may get overridden by the backend.

    #[lua()]
    fn set_scale_factor(
        _self: LuaReflectRefMutProxy<bevy::window::WindowResolution>,
        scale_factor: f32,
    ) -> ();

"#,
    r#"
/// Set the window's scale factor, and apply it to the currently known physical size.
/// This may get overridden by the backend. This is mostly useful on window creation,
/// so that the window is created with the expected size instead of waiting for a resize
/// event after its creation.

    #[lua()]
    fn set_scale_factor_and_apply_to_physical_size(
        _self: LuaReflectRefMutProxy<bevy::window::WindowResolution>,
        scale_factor: f32,
    ) -> ();

"#,
    r#"
/// Set the window's scale factor, this will be used over what the backend decides.
/// This can change the logical and physical sizes if the resulting physical
/// size is not within the limits.

    #[lua()]
    fn set_scale_factor_override(
        _self: LuaReflectRefMutProxy<bevy::window::WindowResolution>,
        scale_factor_override: std::option::Option<f32>,
    ) -> ();

"#,
    r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::WindowResolution>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::WindowResolution>,
        other: LuaReflectRefProxy<bevy::window::WindowResolution>,
    ) -> bool;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct WindowResolution {}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::CompositeAlphaMode",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::CompositeAlphaMode>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::CompositeAlphaMode>,
        other: LuaReflectRefProxy<bevy::window::CompositeAlphaMode>,
    ) -> bool;

"#,
    r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::CompositeAlphaMode>,
    ) -> LuaReflectValProxy<bevy::window::CompositeAlphaMode>;

"#,
    r#"

    #[lua(as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(
        _self: LuaReflectRefProxy<bevy::window::CompositeAlphaMode>,
    ) -> ();

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct CompositeAlphaMode {}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::EnabledButtons",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::EnabledButtons>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::EnabledButtons>,
        other: LuaReflectRefProxy<bevy::window::EnabledButtons>,
    ) -> bool;

"#,
    r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::EnabledButtons>,
    ) -> LuaReflectValProxy<bevy::window::EnabledButtons>;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct EnabledButtons {
    minimize: bool,
    maximize: bool,
    close: bool,
}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::WindowLevel",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(
        _self: LuaReflectRefProxy<bevy::window::WindowLevel>,
    ) -> ();

"#,
    r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::WindowLevel>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::WindowLevel>,
        other: LuaReflectRefProxy<bevy::window::WindowLevel>,
    ) -> bool;

"#,
    r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::WindowLevel>,
    ) -> LuaReflectValProxy<bevy::window::WindowLevel>;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct WindowLevel {}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::InternalWindowState",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"
/// Consumes the current maximize request, if it exists. This should only be called by window backends.

    #[lua()]
    fn take_maximize_request(
        _self: LuaReflectRefMutProxy<bevy::window::InternalWindowState>,
    ) -> std::option::Option<bool>;

"#,
    r#"
/// Consumes the current minimize request, if it exists. This should only be called by window backends.

    #[lua()]
    fn take_minimize_request(
        _self: LuaReflectRefMutProxy<bevy::window::InternalWindowState>,
    ) -> std::option::Option<bool>;

"#,
    r#"
/// Consumes the current move request, if it exists. This should only be called by window backends.

    #[lua()]
    fn take_move_request(
        _self: LuaReflectRefMutProxy<bevy::window::InternalWindowState>,
    ) -> bool;

"#,
    r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::InternalWindowState>,
    ) -> LuaReflectValProxy<bevy::window::InternalWindowState>;

"#,
    r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::InternalWindowState>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::InternalWindowState>,
        other: LuaReflectRefProxy<bevy::window::InternalWindowState>,
    ) -> bool;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct InternalWindowState {}
#[derive(bevy_mod_scripting_derive::LuaProxy)]
#[proxy(
    remote = "bevy::window::CursorGrabMode",
    bms_core_path = "bevy_mod_scripting_core",
    bms_lua_path = "crate",
    functions[r#"

    #[lua(
        as_trait = "std::cmp::PartialEq::<bevy::window::CursorGrabMode>",
        composite = "eq",
    )]
    fn eq(
        _self: LuaReflectRefProxy<bevy::window::CursorGrabMode>,
        other: LuaReflectRefProxy<bevy::window::CursorGrabMode>,
    ) -> bool;

"#,
    r#"

    #[lua(as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(
        _self: LuaReflectRefProxy<bevy::window::CursorGrabMode>,
    ) -> ();

"#,
    r#"

    #[lua(as_trait = "std::clone::Clone")]
    fn clone(
        _self: LuaReflectRefProxy<bevy::window::CursorGrabMode>,
    ) -> LuaReflectValProxy<bevy::window::CursorGrabMode>;

"#,
    r#"
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
"#]
)]
pub struct CursorGrabMode {}
#[derive(Default)]
pub(crate) struct Globals;
impl crate::tealr::mlu::ExportInstances for Globals {
    fn add_instances<'lua, T: crate::tealr::mlu::InstanceCollector<'lua>>(
        self,
        instances: &mut T,
    ) -> crate::tealr::mlu::mlua::Result<()> {
        instances
            .add_instance(
                "WindowResolution",
                crate::tealr::mlu::UserDataProxy::<LuaWindowResolution>::new,
            )?;
        Ok(())
    }
}
fn bevy_window_context_initializer(
    _: &bevy_mod_scripting_core::script::ScriptId,
    ctx: &mut crate::prelude::Lua,
) -> Result<(), bevy_mod_scripting_core::error::ScriptError> {
    crate::tealr::mlu::set_global_env(Globals, ctx)?;
    Ok(())
}
pub struct BevyWindowScriptingPlugin;
impl bevy::app::Plugin for BevyWindowScriptingPlugin {
    fn build(&self, app: &mut bevy::prelude::App) {
        app.register_lua_proxy::<bevy::window::prelude::CursorEntered>();
        app.register_lua_proxy::<bevy::window::prelude::CursorLeft>();
        app.register_lua_proxy::<bevy::window::prelude::CursorMoved>();
        app.register_lua_proxy::<bevy::window::prelude::FileDragAndDrop>();
        app.register_lua_proxy::<bevy::window::prelude::Ime>();
        app.register_lua_proxy::<bevy::window::prelude::MonitorSelection>();
        app.register_lua_proxy::<bevy::window::prelude::Window>();
        app.register_lua_proxy::<bevy::window::prelude::WindowMoved>();
        app.register_lua_proxy::<bevy::window::prelude::WindowPosition>();
        app.register_lua_proxy::<bevy::window::prelude::WindowResizeConstraints>();
        app.register_lua_proxy::<bevy::window::WindowEvent>();
        app.register_lua_proxy::<bevy::window::WindowResized>();
        app.register_lua_proxy::<bevy::window::WindowCreated>();
        app.register_lua_proxy::<bevy::window::WindowClosing>();
        app.register_lua_proxy::<bevy::window::WindowClosed>();
        app.register_lua_proxy::<bevy::window::WindowCloseRequested>();
        app.register_lua_proxy::<bevy::window::WindowDestroyed>();
        app.register_lua_proxy::<bevy::window::RequestRedraw>();
        app.register_lua_proxy::<bevy::window::WindowFocused>();
        app.register_lua_proxy::<bevy::window::WindowOccluded>();
        app.register_lua_proxy::<bevy::window::WindowScaleFactorChanged>();
        app.register_lua_proxy::<bevy::window::WindowBackendScaleFactorChanged>();
        app.register_lua_proxy::<bevy::window::WindowThemeChanged>();
        app.register_lua_proxy::<bevy::window::AppLifecycle>();
        app.register_lua_proxy::<bevy::window::PrimaryWindow>();
        app.register_lua_proxy::<bevy::window::WindowTheme>();
        app.register_lua_proxy::<bevy::window::Monitor>();
        app.register_lua_proxy::<bevy::window::VideoMode>();
        app.register_lua_proxy::<bevy::window::PrimaryMonitor>();
        app.register_lua_proxy::<bevy::window::SystemCursorIcon>();
        app.register_lua_proxy::<bevy::window::WindowRef>();
        app.register_lua_proxy::<bevy::window::NormalizedWindowRef>();
        app.register_lua_proxy::<bevy::window::CursorOptions>();
        app.register_lua_proxy::<bevy::window::PresentMode>();
        app.register_lua_proxy::<bevy::window::WindowMode>();
        app.register_lua_proxy::<bevy::window::WindowResolution>();
        app.register_lua_proxy::<bevy::window::CompositeAlphaMode>();
        app.register_lua_proxy::<bevy::window::EnabledButtons>();
        app.register_lua_proxy::<bevy::window::WindowLevel>();
        app.register_lua_proxy::<bevy::window::InternalWindowState>();
        app.register_lua_proxy::<bevy::window::CursorGrabMode>();
        app.add_context_initializer::<()>(bevy_window_context_initializer);
        app.add_documentation_fragment(
            crate::docs::LuaDocumentationFragment::new(
                "BevyWindowAPI",
                |tw| {
                    tw.document_global_instance::<Globals>()
                        .expect("Something went wrong documenting globals")
                        .process_type::<LuaCursorEntered>()
                        .process_type::<LuaCursorLeft>()
                        .process_type::<LuaCursorMoved>()
                        .process_type::<LuaFileDragAndDrop>()
                        .process_type::<LuaIme>()
                        .process_type::<LuaMonitorSelection>()
                        .process_type::<LuaWindow>()
                        .process_type::<LuaWindowMoved>()
                        .process_type::<LuaWindowPosition>()
                        .process_type::<LuaWindowResizeConstraints>()
                        .process_type::<LuaWindowEvent>()
                        .process_type::<LuaWindowResized>()
                        .process_type::<LuaWindowCreated>()
                        .process_type::<LuaWindowClosing>()
                        .process_type::<LuaWindowClosed>()
                        .process_type::<LuaWindowCloseRequested>()
                        .process_type::<LuaWindowDestroyed>()
                        .process_type::<LuaRequestRedraw>()
                        .process_type::<LuaWindowFocused>()
                        .process_type::<LuaWindowOccluded>()
                        .process_type::<LuaWindowScaleFactorChanged>()
                        .process_type::<LuaWindowBackendScaleFactorChanged>()
                        .process_type::<LuaWindowThemeChanged>()
                        .process_type::<LuaAppLifecycle>()
                        .process_type::<LuaPrimaryWindow>()
                        .process_type::<LuaWindowTheme>()
                        .process_type::<LuaMonitor>()
                        .process_type::<LuaVideoMode>()
                        .process_type::<LuaPrimaryMonitor>()
                        .process_type::<LuaSystemCursorIcon>()
                        .process_type::<LuaWindowRef>()
                        .process_type::<LuaNormalizedWindowRef>()
                        .process_type::<LuaCursorOptions>()
                        .process_type::<LuaPresentMode>()
                        .process_type::<LuaWindowMode>()
                        .process_type::<LuaWindowResolution>()
                        .process_type::<
                            crate::tealr::mlu::UserDataProxy<LuaWindowResolution>,
                        >()
                        .process_type::<LuaCompositeAlphaMode>()
                        .process_type::<LuaEnabledButtons>()
                        .process_type::<LuaWindowLevel>()
                        .process_type::<LuaInternalWindowState>()
                        .process_type::<LuaCursorGrabMode>()
                },
            ),
        );
    }
}
