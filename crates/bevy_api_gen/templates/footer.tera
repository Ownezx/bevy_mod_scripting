#[derive(Default)]
pub(crate) struct Globals;

impl bevy_mod_scripting_lua::tealr::mlu::ExportInstances for Globals {
    fn add_instances<'lua, T: bevy_mod_scripting_lua::tealr::mlu::InstanceCollector<'lua>>(
        self,
        instances: &mut T,
    ) -> bevy_mod_scripting_lua::tealr::mlu::mlua::Result<()> {
        {% for item in items %} 
            {% if item.has_static_methods %}
                instances.add_instance("{{ item.ident }}", 
                                bevy_mod_scripting_lua::tealr::mlu::UserDataProxy::<{{item.ident | prefix_lua}}>::new)?;
            {% endif %}
        {% endfor %}
        Ok(())
    }
}


fn {{ "ContextInitializer" | prefix_cratename | convert_case(case="snake") }} (_: &bevy_mod_scripting_core::script::ScriptId, ctx: &mut bevy_mod_scripting_lua::prelude::Lua) -> Result<(), bevy_mod_scripting_core::error::ScriptError> {
    bevy_mod_scripting_lua::tealr::mlu::set_global_env(Globals, ctx)?;
    Ok(())
}

pub struct {{ "ScriptingPlugin" | prefix_cratename | convert_case(case="upper_camel")}};

impl bevy::app::Plugin for {{ "ScriptingPlugin" | prefix_cratename | convert_case(case="upper_camel")}} {
    fn build(&self, app: &mut bevy::prelude::App) {
        {% for item in items %}
        app.register_foreign_lua_type::<{{ item.import_path }}>();
        {% endfor %}
        app.add_context_initializer::<()>({{ "ContextInitializer" | prefix_cratename | convert_case(case="snake") }});
        app.add_documentation_fragment(
                bevy_mod_scripting_lua::docs::LuaDocumentationFragment::new("{{ "A P I" | prefix_cratename | convert_case(case="upper_camel") }}", |tw| {
                    tw
                    .document_global_instance::<Globals>().expect("Something went wrong documenting globals")
                    {% for item in items %}
                        .process_type::<{{ item.ident | prefix_lua }}>()
                        {% if item.has_static_methods %}
                        .process_type::<bevy_mod_scripting_lua::tealr::mlu::UserDataProxy<{{ item.ident | prefix_lua }}>>()
                        {% endif %}
                    {% endfor %}
                }
            )
        );
    }
}