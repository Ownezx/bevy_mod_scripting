warning: unused import: `Args`
  --> crates/bevy_mod_scripting_core/src/lib.rs:14:15
   |
14 | use handler::{Args, CallbackSettings, HandlerFn};
   |               ^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `utils::BoxedFuture`
  --> crates/bevy_mod_scripting_core/src/asset.rs:10:5
   |
10 |     utils::BoxedFuture,
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `AtomicUsize`
 --> crates/bevy_mod_scripting_core/src/bindings/access_map.rs:2:32
  |
2 |     sync::atomic::{AtomicBool, AtomicUsize},
  |                                ^^^^^^^^^^^

warning: unused imports: `Map` and `try_result::TryResult`
  --> crates/bevy_mod_scripting_core/src/bindings/access_map.rs:10:15
   |
10 | use dashmap::{try_result::TryResult, DashMap, Entry, Map};
   |               ^^^^^^^^^^^^^^^^^^^^^                  ^^^

warning: unused imports: `any::TypeId`, `borrow::Cow`, `ops::Deref`, and `sync::Arc`
 --> crates/bevy_mod_scripting_core/src/bindings/function/mod.rs:1:11
  |
1 | use std::{any::TypeId, borrow::Cow, ops::Deref, sync::Arc};
  |           ^^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^^^^  ^^^^^^^^^

warning: unused imports: `ReflectReference` and `downcast_into_value`
 --> crates/bevy_mod_scripting_core/src/bindings/function/from_ref.rs:6:44
  |
6 |     bindings::{function::from::FromScript, ReflectReference, WorldGuard},
  |                                            ^^^^^^^^^^^^^^^^
7 |     downcast_into_value,
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/bevy_mod_scripting_core/src/bindings/function/into.rs:4:12
  |
4 |     path::{Path, PathBuf},
  |            ^^^^

warning: unused imports: `GetTypeRegistration` and `ReflectRef`
 --> crates/bevy_mod_scripting_core/src/bindings/function/into.rs:7:21
  |
7 | use bevy::reflect::{GetTypeRegistration, PartialReflect, ReflectRef};
  |                     ^^^^^^^^^^^^^^^^^^^                  ^^^^^^^^^^

warning: unused import: `any::TypeId`
 --> crates/bevy_mod_scripting_core/src/bindings/function/into_ref.rs:1:11
  |
1 | use std::{any::TypeId, ffi::OsString, path::PathBuf};
  |           ^^^^^^^^^^^

warning: unused imports: `AppFunctionRegistry`, `DynamicFunction`, `FunctionInfo`, `IntoFunction`, `PartialReflect`, `TypeRegistration`, `TypedFunction`, and `World`
  --> crates/bevy_mod_scripting_core/src/bindings/function/script_function.rs:11:15
   |
11 |     prelude::{AppFunctionRegistry, IntoFunction, Reflect, Resource, World},
   |               ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^                     ^^^^^
12 |     reflect::{
13 |         func::{args::GetOwnership, DynamicFunction, FunctionError, FunctionInfo, TypedFunction},
   |                                    ^^^^^^^^^^^^^^^                 ^^^^^^^^^^^^  ^^^^^^^^^^^^^
14 |         FromReflect, GetTypeRegistration, PartialReflect, TypePath, TypeRegistration, TypeRegistry,
   |                                           ^^^^^^^^^^^^^^            ^^^^^^^^^^^^^^^^

warning: unused imports: `ArgInfo`, `ArgList`, `ArgValue`, `Arg`, `DynamicFunction`, `FunctionInfo`, `FunctionResult`, `Ownership`, `PartialReflect`, and `Return`
  --> crates/bevy_mod_scripting_core/src/bindings/function/mod.rs:11:16
   |
11 |         args::{Arg, ArgInfo, Ownership},
   |                ^^^  ^^^^^^^  ^^^^^^^^^
12 |         ArgList, ArgValue, DynamicFunction, FunctionInfo, FunctionResult, Return,
   |         ^^^^^^^  ^^^^^^^^  ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^^^  ^^^^^^
13 |     },
14 |     PartialReflect,
   |     ^^^^^^^^^^^^^^

warning: unused imports: `FlattenError`, `InteropErrorInner`, `PartialReflectExt`, `ReturnValExt`, `ScriptError`, and `ScriptResult`
  --> crates/bevy_mod_scripting_core/src/bindings/function/mod.rs:19:13
   |
19 |     error::{FlattenError, InteropError, InteropErrorInner, ScriptError, ScriptResult},
   |             ^^^^^^^^^^^^                ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^^^^^^
20 |     reflection_extensions::{PartialReflectExt, ReturnValExt},
   |                             ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused imports: `ReflectBase`, `ReflectReference`, `WorldAccessGuard`, `access_map::ReflectAccessId`, and `pretty_print::DisplayWithWorld`
  --> crates/bevy_mod_scripting_core/src/bindings/function/mod.rs:24:5
   |
24 |     access_map::ReflectAccessId, pretty_print::DisplayWithWorld, script_value::ScriptValue,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
25 |     ReflectBase, ReflectReference, WorldAccessGuard, WorldCallbackAccess, WorldGuard,
   |     ^^^^^^^^^^^  ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^

warning: unused imports: `CONCURRENT_WORLD_ACCESS_MSG` and `STALE_WORLD_MSG`
 --> crates/bevy_mod_scripting_core/src/bindings/query.rs:3:16
  |
3 |     bindings::{CONCURRENT_WORLD_ACCESS_MSG, STALE_WORLD_MSG},
  |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^

warning: unused imports: `WorldAccessGuard` and `WorldCallbackAccess`
 --> crates/bevy_mod_scripting_core/src/bindings/reference.rs:9:5
  |
9 |     WorldAccessGuard, WorldCallbackAccess, WorldGuard,
  |     ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^

warning: unused import: `ScriptResult`
  --> crates/bevy_mod_scripting_core/src/bindings/reference.rs:14:33
   |
14 |     prelude::{ReflectAllocator, ScriptResult},
   |                                 ^^^^^^^^^^^^

warning: unused imports: `ArgValue`, `ReflectFromReflect`, `ReflectMut`, `ReflectPathError`, `ReflectRef`, and `args::ArgInfo`
  --> crates/bevy_mod_scripting_core/src/bindings/reference.rs:26:16
   |
26 |         func::{args::ArgInfo, ArgValue},
   |                ^^^^^^^^^^^^^  ^^^^^^^^
27 |         ParsedPath, PartialReflect, Reflect, ReflectFromPtr, ReflectFromReflect, ReflectMut,
   |                                                              ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^
28 |         ReflectPath, ReflectPathError, ReflectRef, TypeData,
   |                      ^^^^^^^^^^^^^^^^  ^^^^^^^^^^

warning: unused import: `itertools::Either`
  --> crates/bevy_mod_scripting_core/src/bindings/reference.rs:31:5
   |
31 | use itertools::Either;
   |     ^^^^^^^^^^^^^^^^^

warning: unused import: `sync::Arc`
  --> crates/bevy_mod_scripting_core/src/bindings/reference.rs:32:36
   |
32 | use std::{any::TypeId, fmt::Debug, sync::Arc};
   |                                    ^^^^^^^^^

warning: unused imports: `CStr`, `CString`, `OsStr`, `OsString`, `PathBuf`, `Path`, `TypeId`, and `type_name`
 --> crates/bevy_mod_scripting_core/src/bindings/script_value/mod.rs:2:11
  |
2 |     any::{type_name, TypeId},
  |           ^^^^^^^^^  ^^^^^^
3 |     borrow::Cow,
4 |     ffi::{CStr, CString, OsStr, OsString},
  |           ^^^^  ^^^^^^^  ^^^^^  ^^^^^^^^
5 |     path::{Path, PathBuf},
  |            ^^^^  ^^^^^^^

warning: unused imports: `Access`, `DynamicEnum`, `DynamicList`, `DynamicTuple`, `DynamicVariant`, `PartialReflect`, `ReflectFromReflect`, and `TypeData`
  --> crates/bevy_mod_scripting_core/src/bindings/script_value/mod.rs:9:5
   |
9  |     Access, DynamicEnum, DynamicList, DynamicTuple, DynamicVariant, OffsetAccess, ParsedPath,
   |     ^^^^^^  ^^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^^^
10 |     PartialReflect, Reflect, ReflectFromReflect, TypeData,
   |     ^^^^^^^^^^^^^^           ^^^^^^^^^^^^^^^^^^  ^^^^^^^^

warning: unused imports: `InteropErrorInner`, `PartialReflectExt`, `ScriptError`, `ScriptResult`, `TypeIdExtensions`, and `TypeInfoExtensions`
  --> crates/bevy_mod_scripting_core/src/bindings/script_value/mod.rs:14:27
   |
14 |     error::{InteropError, InteropErrorInner, ScriptError, ScriptResult},
   |                           ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^^^^^^
15 |     reflection_extensions::{PartialReflectExt, TypeIdExtensions, TypeInfoExtensions},
   |                             ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^

warning: unused imports: `DynamicScriptFunction`, `WorldGuard`, and `pretty_print::DisplayWithWorld`
  --> crates/bevy_mod_scripting_core/src/bindings/script_value/mod.rs:19:33
   |
19 |     function::script_function::{DynamicScriptFunction, DynamicScriptFunctionMut},
   |                                 ^^^^^^^^^^^^^^^^^^^^^
20 |     pretty_print::DisplayWithWorld,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
21 |     ReflectReference, WorldGuard,
   |                       ^^^^^^^^^^

warning: unused imports: `AtomicUsize`, `Ordering`, `marker::PhantomData`, and `mem`
  --> crates/bevy_mod_scripting_core/src/bindings/world.rs:11:5
   |
11 |     marker::PhantomData,
   |     ^^^^^^^^^^^^^^^^^^^
12 |     mem,
   |     ^^^
...
15 |         atomic::{AtomicUsize, Ordering},
   |                  ^^^^^^^^^^^  ^^^^^^^^

warning: unused imports: `TypeRegistry` and `utils::HashMap`
  --> crates/bevy_mod_scripting_core/src/bindings/world.rs:33:19
   |
33 |         TypePath, TypeRegistry, TypeRegistryArc,
   |                   ^^^^^^^^^^^^
34 |     },
35 |     utils::HashMap,
   |     ^^^^^^^^^^^^^^

warning: unused import: `smallvec::SmallVec`
  --> crates/bevy_mod_scripting_core/src/bindings/world.rs:38:5
   |
38 | use smallvec::SmallVec;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused imports: `ReflectAllocator`, `ScriptError`, `ScriptResult`, and `bindings::ReflectAllocationId`
  --> crates/bevy_mod_scripting_core/src/bindings/world.rs:41:5
   |
41 |     bindings::ReflectAllocationId,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
42 |     error::InteropError,
43 |     prelude::{ReflectAllocator, ScriptError, ScriptResult},
   |               ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused imports: `Context` and `Runtime`
 --> crates/bevy_mod_scripting_core/src/commands.rs:7:15
  |
7 |     context::{Context, ContextLoadingSettings, ScriptContexts},
  |               ^^^^^^^
8 |     prelude::{Runtime, RuntimeContainer},
  |               ^^^^^^^

warning: unused import: `Runtime`
 --> crates/bevy_mod_scripting_core/src/context.rs:6:15
  |
6 |     prelude::{Runtime, ScriptError},
  |               ^^^^^^^

warning: unused import: `borrow::Cow`
 --> crates/bevy_mod_scripting_core/src/error.rs:3:5
  |
3 |     borrow::Cow,
  |     ^^^^^^^^^^^

warning: unused imports: `ApplyError`, `FunctionInfo`, `ReflectPathError`, and `args::ArgInfo`
  --> crates/bevy_mod_scripting_core/src/error.rs:14:16
   |
14 |         func::{args::ArgInfo, FunctionError, FunctionInfo},
   |                ^^^^^^^^^^^^^                 ^^^^^^^^^^^^
15 |         ApplyError, PartialReflect, Reflect, ReflectPathError,
   |         ^^^^^^^^^^                           ^^^^^^^^^^^^^^^^

warning: unused import: `thiserror::Error`
  --> crates/bevy_mod_scripting_core/src/error.rs:18:5
   |
18 | use thiserror::Error;
   |     ^^^^^^^^^^^^^^^^

warning: unused imports: `ReflectAllocationId` and `ReflectBase`
  --> crates/bevy_mod_scripting_core/src/error.rs:24:9
   |
24 |         ReflectAllocationId, ReflectBase, ReflectBaseType, ReflectReference,
   |         ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `handler::Args`
 --> crates/bevy_mod_scripting_core/src/event.rs:3:33
  |
3 | use crate::{error::ScriptError, handler::Args, prelude::ScriptValue, script::ScriptId};
  |                                 ^^^^^^^^^^^^^

warning: unused imports: `Context` and `runtime::Runtime`
 --> crates/bevy_mod_scripting_core/src/handler.rs:4:15
  |
4 |     context::{Context, ContextPreHandlingInitializer},
  |               ^^^^^^^
...
7 |     runtime::Runtime,
  |     ^^^^^^^^^^^^^^^^

warning: unused imports: `CStr`, `CString`, `OsStr`, `OsString`, `PathBuf`, `Path`, and `borrow::Cow`
 --> crates/bevy_mod_scripting_core/src/reflection_extensions.rs:3:5
  |
3 |     borrow::Cow,
  |     ^^^^^^^^^^^
4 |     cmp::max,
5 |     ffi::{CStr, CString, OsStr, OsString},
  |           ^^^^  ^^^^^^^  ^^^^^  ^^^^^^^^
6 |     ops::Sub,
7 |     path::{Path, PathBuf},
  |            ^^^^  ^^^^^^^

warning: unused imports: `WorldAccessGuard` and `script_value::ScriptValue`
  --> crates/bevy_mod_scripting_core/src/reflection_extensions.rs:19:41
   |
19 |         pretty_print::DisplayWithWorld, script_value::ScriptValue, ReflectReference,
   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
20 |         WorldAccessGuard, WorldGuard,
   |         ^^^^^^^^^^^^^^^^

warning: unused imports: `Args`, `Context`, `ReflectAllocator`, `Runtime`, and `ScriptResult`
  --> crates/bevy_mod_scripting_core/src/systems.rs:6:48
   |
6  |     bindings::{pretty_print::DisplayWithWorld, ReflectAllocator, WorldAccessGuard, WorldGuard},
   |                                                ^^^^^^^^^^^^^^^^
7  |     commands::{CreateOrUpdateScript, DeleteScript},
8  |     context::{Context, ContextLoadingSettings, ScriptContexts},
   |               ^^^^^^^
9  |     error::{ScriptError, ScriptResult},
   |                          ^^^^^^^^^^^^
10 |     event::{IntoCallbackLabel, ScriptCallbackEvent, ScriptErrorEvent},
11 |     handler::{Args, CallbackSettings},
   |               ^^^^
12 |     prelude::{AppReflectAllocator, RuntimeSettings},
13 |     runtime::{Runtime, RuntimeContainer},
   |               ^^^^^^^

warning: unused import: `AsyncReadExt`
 --> crates/bevy_mod_scripting_core/src/asset.rs:7:33
  |
7 |     asset::{Asset, AssetLoader, AsyncReadExt},
  |                                 ^^^^^^^^^^^^

warning: unused import: `std::io::Read`
 --> crates/bevy_mod_scripting_core/src/bindings/allocator.rs:8:5
  |
8 | use std::io::Read;
  |     ^^^^^^^^^^^^^

warning: unused import: `Reflect`
 --> crates/bevy_mod_scripting_core/src/bindings/allocator.rs:2:37
  |
2 | use bevy::reflect::{PartialReflect, Reflect};
  |                                     ^^^^^^^

warning: unused import: `Any`
 --> crates/bevy_mod_scripting_core/src/bindings/allocator.rs:4:16
  |
4 | use std::any::{Any, TypeId};
  |                ^^^

warning: unused import: `GetTypeRegistration`
 --> crates/bevy_mod_scripting_core/src/bindings/function/from.rs:6:34
  |
6 | use bevy::reflect::{FromReflect, GetTypeRegistration, Reflect};
  |                                  ^^^^^^^^^^^^^^^^^^^

warning: unused import: `itertools::Itertools`
  --> crates/bevy_mod_scripting_core/src/reflection_extensions.rs:15:5
   |
15 | use itertools::Itertools;
   |     ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `pretty_print::DisplayWithWorld`
  --> crates/bevy_mod_scripting_core/src/reflection_extensions.rs:19:9
   |
19 |         pretty_print::DisplayWithWorld, script_value::ScriptValue, ReflectReference,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `TypeData`
  --> crates/bevy_mod_scripting_core/src/reflection_extensions.rs:13:17
   |
13 |     ReflectMut, TypeData, TypeInfo,
   |                 ^^^^^^^^

warning: unused import: `FromType`
  --> crates/bevy_mod_scripting_core/src/reflection_extensions.rs:12:32
   |
12 |     func::Return, FromReflect, FromType, List, PartialReflect, Reflect, ReflectFromReflect,
   |                                ^^^^^^^^

warning: unused import: `AccessMapKey`
 --> crates/bevy_mod_scripting_core/src/bindings/reference.rs:8:18
  |
8 |     access_map::{AccessMapKey, ReflectAccessId},
  |                  ^^^^^^^^^^^^

warning: unused import: `pretty_print::DisplayWithWorld`
  --> crates/bevy_mod_scripting_core/src/bindings/reference.rs:12:16
   |
12 |     bindings::{pretty_print::DisplayWithWorld, ReflectAllocationId},
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `List`
  --> crates/bevy_mod_scripting_core/src/reflection_extensions.rs:12:42
   |
12 |     func::Return, FromReflect, FromType, List, PartialReflect, Reflect, ReflectFromReflect,
   |                                          ^^^^

warning: unused import: `TypeData`
  --> crates/bevy_mod_scripting_core/src/bindings/reference.rs:28:52
   |
28 |         ReflectPath, ReflectPathError, ReflectRef, TypeData,
   |                                                    ^^^^^^^^

warning: unused import: `str::FromStr`
 --> crates/bevy_mod_scripting_core/src/reflection_extensions.rs:8:5
  |
8 |     str::FromStr,
  |     ^^^^^^^^^^^^

warning: unused import: `ops::Sub`
 --> crates/bevy_mod_scripting_core/src/reflection_extensions.rs:6:5
  |
6 |     ops::Sub,
  |     ^^^^^^^^

warning: unused import: `ops::Deref`
  --> crates/bevy_mod_scripting_core/src/bindings/world.rs:13:5
   |
13 |     ops::Deref,
   |     ^^^^^^^^^^

warning: unused import: `DerefMut`
 --> crates/bevy_mod_scripting_core/src/error.rs:5:18
  |
5 |     ops::{Deref, DerefMut},
  |                  ^^^^^^^^

warning: unused import: `func::args::FromArg`
  --> crates/bevy_mod_scripting_core/src/bindings/world.rs:32:9
   |
32 |         func::args::FromArg, std_traits::ReflectDefault, ParsedPath, PartialReflect, Reflect,
   |         ^^^^^^^^^^^^^^^^^^^

warning: unused import: `PartialReflect`
  --> crates/bevy_mod_scripting_core/src/bindings/world.rs:32:70
   |
32 |         func::args::FromArg, std_traits::ReflectDefault, ParsedPath, PartialReflect, Reflect,
   |                                                                      ^^^^^^^^^^^^^^

warning: unused import: `TypePath`
  --> crates/bevy_mod_scripting_core/src/bindings/world.rs:33:9
   |
33 |         TypePath, TypeRegistry, TypeRegistryArc,
   |         ^^^^^^^^

warning: unused import: `reflection_extensions::TypeIdExtensions`
  --> crates/bevy_mod_scripting_core/src/bindings/world.rs:44:5
   |
44 |     reflection_extensions::TypeIdExtensions,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `value`
  --> crates/bevy_mod_scripting_core/src/bindings/function/from.rs:37:20
   |
37 |     fn from_script(value: ScriptValue, _world: WorldGuard) -> Result<Self, InteropError> {
   |                    ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `v`
   --> crates/bevy_mod_scripting_core/src/bindings/script_value/mod.rs:151:32
    |
151 |             ScriptValue::Float(v) => {
    |                                ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `e`
   --> crates/bevy_mod_scripting_core/src/bindings/world.rs:701:27
    |
701 |                 .map_err(|e| InteropError::missing_entity(entity))?;
    |                           ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: unused variable: `e`
   --> crates/bevy_mod_scripting_core/src/bindings/world.rs:777:27
    |
777 |                 .map_err(|e| InteropError::missing_entity(entity))?;
    |                           ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: function `map_key_to_concrete` is never used
   --> crates/bevy_mod_scripting_core/src/bindings/reference.rs:465:4
    |
465 | fn map_key_to_concrete(key: &str, key_type_id: TypeId) -> Option<Box<dyn PartialReflect>> {
    |    ^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: constant `STALE_WORLD_MSG` is never used
   --> crates/bevy_mod_scripting_core/src/bindings/world.rs:116:18
    |
116 | pub(crate) const STALE_WORLD_MSG: &str = "Tried to access world via stale reference";
    |                  ^^^^^^^^^^^^^^^

warning: constant `CONCURRENT_WORLD_ACCESS_MSG` is never used
   --> crates/bevy_mod_scripting_core/src/bindings/world.rs:117:18
    |
117 | pub(crate) const CONCURRENT_WORLD_ACCESS_MSG: &str =
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant `CONCURRENT_ACCESS_MSG` is never used
   --> crates/bevy_mod_scripting_core/src/bindings/world.rs:119:18
    |
119 | pub(crate) const CONCURRENT_ACCESS_MSG: &str =
    |                  ^^^^^^^^^^^^^^^^^^^^^

warning: bounds on generic parameters in type aliases are not enforced
  --> crates/bevy_mod_scripting_core/src/context.rs:55:32
   |
55 | pub type ContextInitializer<P: IntoScriptPluginParams> =
   |                                ^^^^^^^^^^^^^^^^^^^^^^ will not be checked at usage sites of the type alias
   |
   = note: this is a known limitation of the type checker that may be lifted in a future edition.
           see issue #112792 <https://github.com/rust-lang/rust/issues/112792> for more information
   = note: `#[warn(type_alias_bounds)]` on by default
help: remove this bound
   |
55 - pub type ContextInitializer<P: IntoScriptPluginParams> =
55 + pub type ContextInitializer<P> =
   |
help: fully qualify this associated type
   |
56 |     fn(&ScriptId, &mut <P as /* Trait */>::C) -> Result<(), ScriptError>;
   |                        +  +++++++++++++++

warning: bounds on generic parameters in type aliases are not enforced
  --> crates/bevy_mod_scripting_core/src/context.rs:58:43
   |
58 | pub type ContextPreHandlingInitializer<P: IntoScriptPluginParams> =
   |                                           ^^^^^^^^^^^^^^^^^^^^^^ will not be checked at usage sites of the type alias
   |
   = note: this is a known limitation of the type checker that may be lifted in a future edition.
           see issue #112792 <https://github.com/rust-lang/rust/issues/112792> for more information
help: remove this bound
   |
58 - pub type ContextPreHandlingInitializer<P: IntoScriptPluginParams> =
58 + pub type ContextPreHandlingInitializer<P> =
   |
help: fully qualify this associated type
   |
59 |     fn(&ScriptId, Entity, &mut <P as /* Trait */>::C) -> Result<(), ScriptError>;
   |                                +  +++++++++++++++

warning: bounds on generic parameters in type aliases are not enforced
  --> crates/bevy_mod_scripting_core/src/handler.rs:15:23
   |
15 | pub type HandlerFn<P: IntoScriptPluginParams> = fn(
   |                       ^^^^^^^^^^^^^^^^^^^^^^ will not be checked at usage sites of the type alias
   |
   = note: this is a known limitation of the type checker that may be lifted in a future edition.
           see issue #112792 <https://github.com/rust-lang/rust/issues/112792> for more information
help: remove this bound
   |
15 - pub type HandlerFn<P: IntoScriptPluginParams> = fn(
15 + pub type HandlerFn<P> = fn(
   |
help: fully qualify this associated type
   |
20 |     context: &mut <P as /* Trait */>::C,
   |                   +  +++++++++++++++
help: fully qualify this associated type
   |
22 |     runtime: &mut <P as /* Trait */>::R,
   |                   +  +++++++++++++++

warning: bounds on generic parameters in type aliases are not enforced
  --> crates/bevy_mod_scripting_core/src/runtime.rs:11:32
   |
11 | pub type RuntimeInitializer<P: IntoScriptPluginParams> = fn(&mut P::R);
   |                                ^^^^^^^^^^^^^^^^^^^^^^ will not be checked at usage sites of the type alias
   |
   = note: this is a known limitation of the type checker that may be lifted in a future edition.
           see issue #112792 <https://github.com/rust-lang/rust/issues/112792> for more information
help: remove this bound
   |
11 - pub type RuntimeInitializer<P: IntoScriptPluginParams> = fn(&mut P::R);
11 + pub type RuntimeInitializer<P> = fn(&mut P::R);
   |
help: fully qualify this associated type
   |
11 | pub type RuntimeInitializer<P: IntoScriptPluginParams> = fn(&mut <P as /* Trait */>::R);
   |                                                                  +  +++++++++++++++

warning: `bevy_mod_scripting_core` (lib) generated 71 warnings (run `cargo fix --lib -p bevy_mod_scripting_core` to apply 38 suggestions)
warning: unused import: `std::borrow::Cow`
 --> crates/bevy_mod_scripting_functions/src/core.rs:2:5
  |
2 | use std::borrow::Cow;
  |     ^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `FunctionRegistryArc`, `FunctionRegistry`, and `GetTypeRegistration`
 --> crates/bevy_mod_scripting_functions/src/core.rs:7:43
  |
7 |         func::{FunctionRegistrationError, FunctionRegistry, FunctionRegistryArc}, GetTypeRegistration, ParsedPath
  |                                           ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `GetFunctionTypeDependencies`, `Mut`, `ScriptFunction`, and `WorldAccessGuard`
  --> crates/bevy_mod_scripting_functions/src/core.rs:13:16
   |
13 |         from::{Mut, Ref, Val},
   |                ^^^
...
16 |         script_function::{CallerContext, GetFunctionTypeDependencies, ScriptFunction, ScriptFunctionMut},
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^
...
21 |     ScriptTypeRegistration, WorldAccessGuard, WorldCallbackAccess,
   |                             ^^^^^^^^^^^^^^^^

warning: unused import: `InteropErrorInner`
  --> crates/bevy_mod_scripting_functions/src/core.rs:23:27
   |
23 | use error::{InteropError, InteropErrorInner};
   |                           ^^^^^^^^^^^^^^^^^

warning: unused imports: `AppFunctionRegistry`, `DynamicFunction`, `FunctionRegistrationError`, `FunctionRegistry`, and `IntoFunction`
 --> crates/bevy_mod_scripting_functions/src/namespaced_register.rs:4:15
  |
4 |     prelude::{AppFunctionRegistry, AppTypeRegistry, IntoFunction, World},
  |               ^^^^^^^^^^^^^^^^^^^                   ^^^^^^^^^^^^
5 |     reflect::func::{DynamicFunction, FunctionRegistrationError, FunctionRegistry},
  |                     ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^

warning: unused variable: `s`
   --> crates/bevy_mod_scripting_functions/src/core.rs:145:14
    |
145 |             |s: WorldCallbackAccess, components: Vec<Val<ScriptTypeRegistration>>| {
    |              ^ help: if this is intentional, prefix it with an underscore: `_s`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `idx`
   --> crates/bevy_mod_scripting_functions/src/core.rs:313:32
    |
313 |                 let (next_ref, idx) = infinite_iter.next_ref();
    |                                ^^^ help: if this is intentional, prefix it with an underscore: `_idx`

warning: variable does not need to be mutable
   --> crates/bevy_mod_scripting_functions/src/namespaced_register.rs:152:21
    |
152 |                 let mut type_registry = self.world.get_resource_or_init::<AppTypeRegistry>();
    |                     ----^^^^^^^^^^^^^
    |                     |
    |                     help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: `bevy_mod_scripting_functions` (lib) generated 8 warnings (run `cargo fix --lib -p bevy_mod_scripting_functions` to apply 6 suggestions)
warning: unexpected `cfg` condition value: `teal`
  --> crates/languages/bevy_mod_scripting_lua/src/util.rs:16:11
   |
16 | #[cfg(all(feature = "teal", debug_assertions))]
   |           ^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `lua51`, `lua52`, `lua53`, `lua54`, `luajit`, `luajit52`, `luau`, `mlua_async`, `mlua_macros`, `mlua_serialize`, and `unsafe_lua_modules`
   = help: consider adding `teal` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `teal`
  --> crates/languages/bevy_mod_scripting_lua/src/util.rs:32:34
   |
32 | #[cfg(all(not(debug_assertions), feature = "teal"))]
   |                                  ^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `lua51`, `lua52`, `lua53`, `lua54`, `luajit`, `luajit52`, `luau`, `mlua_async`, `mlua_macros`, `mlua_serialize`, and `unsafe_lua_modules`
   = help: consider adding `teal` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `teal`
  --> crates/languages/bevy_mod_scripting_lua/src/util.rs:48:11
   |
48 | #[cfg(not(feature = "teal"))]
   |           ^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `lua51`, `lua52`, `lua53`, `lua54`, `luajit`, `luajit52`, `luau`, `mlua_async`, `mlua_macros`, `mlua_serialize`, and `unsafe_lua_modules`
   = help: consider adding `teal` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused imports: `DerefMut` and `Deref`
 --> crates/languages/bevy_mod_scripting_lua/src/util.rs:1:16
  |
1 | use std::ops::{Deref, DerefMut};
  |                ^^^^^  ^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `AppTypeRegistry`, `FromType`, `GetTypeRegistration`, `Mut`, `PartialReflect`, `Startup`, `TypePath`, and `impl_reflect`
 --> crates/languages/bevy_mod_scripting_lua/src/lib.rs:3:24
  |
3 |     app::{App, Plugin, Startup},
  |                        ^^^^^^^
4 |     ecs::{entity::Entity, world::World},
5 |     prelude::{AppTypeRegistry, Mut},
  |               ^^^^^^^^^^^^^^^  ^^^
6 |     reflect::{impl_reflect, FromType, GetTypeRegistration, PartialReflect, Reflect, TypePath},
  |               ^^^^^^^^^^^^  ^^^^^^^^  ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^           ^^^^^^^^

warning: unused imports: `IntoCallbackLabel`, `ReflectAllocator`, `ReflectReference`, `handler::Args`, and `systems::event_handler`
  --> crates/languages/bevy_mod_scripting_lua/src/lib.rs:10:36
   |
10 |         script_value::ScriptValue, ReflectAllocator, ReflectReference, WorldCallbackAccess,
   |                                    ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^
...
14 |     event::{CallbackLabel, IntoCallbackLabel},
   |                            ^^^^^^^^^^^^^^^^^
15 |     handler::Args,
   |     ^^^^^^^^^^^^^
...
18 |     systems::event_handler,
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `LuaWorld`
  --> crates/languages/bevy_mod_scripting_lua/src/lib.rs:27:23
   |
27 |     world::{GetWorld, LuaWorld},
   |                       ^^^^^^^^

warning: unused import: `IntoLuaMulti`
  --> crates/languages/bevy_mod_scripting_lua/src/lib.rs:30:22
   |
30 | use mlua::{Function, IntoLuaMulti, Lua};
   |                      ^^^^^^^^^^^^

warning: unused imports: `CStr`, `CString`, `OsStr`, `OsString`, `PathBuf`, `Path`, `borrow::Cow`, and `sync::Arc`
 --> crates/languages/bevy_mod_scripting_lua/src/bindings/reference.rs:3:5
  |
3 |     borrow::Cow,
  |     ^^^^^^^^^^^
4 |     error::Error,
5 |     ffi::{CStr, CString, OsStr, OsString},
  |           ^^^^  ^^^^^^^  ^^^^^  ^^^^^^^^
6 |     path::{Path, PathBuf},
  |            ^^^^  ^^^^^^^
7 |     sync::Arc,
  |     ^^^^^^^^^

warning: unused imports: `OffsetAccess`, `ParsedPath`, `ReflectFromReflect`, `func::DynamicFunction`, `prelude::AppFunctionRegistry`, `reflect::AppTypeRegistry`, and `world::Mut`
  --> crates/languages/bevy_mod_scripting_lua/src/bindings/reference.rs:11:11
   |
11 |     ecs::{reflect::AppTypeRegistry, world::Mut},
   |           ^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^
12 |     prelude::AppFunctionRegistry,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 |     reflect::{
14 |         func::DynamicFunction, OffsetAccess, ParsedPath, PartialReflect, ReflectFromReflect,
   |         ^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^                  ^^^^^^^^^^^^^^^^^^

warning: unused imports: `CallerContext`, `Either`, `ReflectAllocator`, `ReflectRefIter`, `ReflectReferencePrinter`, `ScriptError`, `ScriptResult`, `TypeIdSource`, and `WorldCallbackAccess`
  --> crates/languages/bevy_mod_scripting_lua/src/bindings/reference.rs:20:58
   |
20 |             script_function::{AppScriptFunctionRegistry, CallerContext, DynamicScriptFunction},
   |                                                          ^^^^^^^^^^^^^
...
23 |         pretty_print::{DisplayWithWorld, ReflectReferencePrinter},
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^
24 |         script_value::ScriptValue,
25 |         ReflectAllocator, ReflectRefIter, ReflectReference, ReflectionPathExt, TypeIdSource,
   |         ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^                                       ^^^^^^^^^^^^
26 |         WorldCallbackAccess, WorldGuard,
   |         ^^^^^^^^^^^^^^^^^^^
27 |     },
28 |     error::{InteropError, ScriptError, ScriptResult},
   |                           ^^^^^^^^^^^  ^^^^^^^^^^^^
29 |     reflection_extensions::{PartialReflectExt, TypeIdExtensions},
30 |     Either,
   |     ^^^^^^

warning: unused import: `Value`
  --> crates/languages/bevy_mod_scripting_lua/src/bindings/reference.rs:33:75
   |
33 | use mlua::{Function, IntoLua, Lua, MetaMethod, UserData, UserDataMethods, Value, Variadic};
   |                                                                           ^^^^^

warning: unused import: `world::LuaWorld`
  --> crates/languages/bevy_mod_scripting_lua/src/bindings/reference.rs:40:57
   |
40 | use crate::bindings::{script_value::lua_caller_context, world::LuaWorld};
   |                                                         ^^^^^^^^^^^^^^^

warning: unused imports: `ReflectBase` and `ReflectReference`
 --> crates/languages/bevy_mod_scripting_lua/src/bindings/script_value.rs:6:5
  |
6 |     ReflectBase, ReflectReference,
  |     ^^^^^^^^^^^  ^^^^^^^^^^^^^^^^

warning: unused imports: `IntoLuaMulti` and `MultiValue`
 --> crates/languages/bevy_mod_scripting_lua/src/bindings/script_value.rs:8:30
  |
8 | use mlua::{FromLua, IntoLua, IntoLuaMulti, MultiValue, Value, Variadic};
  |                              ^^^^^^^^^^^^  ^^^^^^^^^^

warning: unused imports: `component::ComponentId`, `reflect::AppTypeRegistry`, and `world::Mut`
 --> crates/languages/bevy_mod_scripting_lua/src/bindings/world.rs:3:17
  |
3 | use bevy::ecs::{component::ComponentId, reflect::AppTypeRegistry, world::Mut};
  |                 ^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^

warning: unused imports: `AppFunctionRegistry`, `Entity`, and `World`
 --> crates/languages/bevy_mod_scripting_lua/src/bindings/world.rs:4:21
  |
4 | use bevy::prelude::{AppFunctionRegistry, Entity, World};
  |                     ^^^^^^^^^^^^^^^^^^^  ^^^^^^  ^^^^^

warning: unused imports: `ReflectReference`, `ScriptTypeRegistration`, and `error::ScriptError`
  --> crates/languages/bevy_mod_scripting_lua/src/bindings/world.rs:9:16
   |
9  |     bindings::{ReflectReference, ScriptTypeRegistration, WorldAccessGuard, WorldCallbackAccess},
   |                ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^
10 |     error::ScriptError,
   |     ^^^^^^^^^^^^^^^^^^

warning: unused imports: `GetNamespacedFunction` and `Namespace`
  --> crates/languages/bevy_mod_scripting_lua/src/bindings/world.rs:12:57
   |
12 | use bevy_mod_scripting_functions::namespaced_register::{GetNamespacedFunction, Namespace};
   |                                                         ^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^

warning: unused imports: `MetaMethod`, `UserDataFields`, `UserDataMethods`, `Value`, and `Variadic`
  --> crates/languages/bevy_mod_scripting_lua/src/bindings/world.rs:13:12
   |
13 | use mlua::{MetaMethod, UserData, UserDataFields, UserDataMethods, Value, Variadic};
   |            ^^^^^^^^^^            ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^  ^^^^^  ^^^^^^^^

warning: unused import: `super::script_value::LuaScriptValue`
  --> crates/languages/bevy_mod_scripting_lua/src/bindings/world.rs:15:5
   |
15 | use super::script_value::LuaScriptValue;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Any`
 --> crates/languages/bevy_mod_scripting_lua/src/bindings/reference.rs:2:11
  |
2 |     any::{Any, TypeId},
  |           ^^^

warning: unused import: `error::Error`
 --> crates/languages/bevy_mod_scripting_lua/src/bindings/reference.rs:4:5
  |
4 |     error::Error,
  |     ^^^^^^^^^^^^

warning: unused import: `PartialReflect`
  --> crates/languages/bevy_mod_scripting_lua/src/bindings/reference.rs:14:58
   |
14 |         func::DynamicFunction, OffsetAccess, ParsedPath, PartialReflect, ReflectFromReflect,
   |                                                          ^^^^^^^^^^^^^^

warning: unused import: `ReflectionPathExt`
  --> crates/languages/bevy_mod_scripting_lua/src/bindings/reference.rs:25:61
   |
25 |         ReflectAllocator, ReflectRefIter, ReflectReference, ReflectionPathExt, TypeIdSource,
   |                                                             ^^^^^^^^^^^^^^^^^

warning: unused import: `PartialReflectExt`
  --> crates/languages/bevy_mod_scripting_lua/src/bindings/reference.rs:29:29
   |
29 |     reflection_extensions::{PartialReflectExt, TypeIdExtensions},
   |                             ^^^^^^^^^^^^^^^^^

warning: unused import: `Reflect`
 --> crates/languages/bevy_mod_scripting_lua/src/lib.rs:6:76
  |
6 |     reflect::{impl_reflect, FromType, GetTypeRegistration, PartialReflect, Reflect, TypePath},
  |                                                                            ^^^^^^^

warning: `bevy_mod_scripting_lua` (lib) generated 27 warnings (run `cargo fix --lib -p bevy_mod_scripting_lua` to apply 18 suggestions)
   Compiling bevy_mod_scripting v0.9.0-alpha.1 (/home/makspll/git/bevy_mod_scripting)
